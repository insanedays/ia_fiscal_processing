analyze_intent:
  description: "Classifica a intenção da pergunta do usuário com base no escopo de dados estruturados de notas fiscais."
  prompt: |
    Sua tarefa é analisar a intenção da pergunta do usuário e classificá-la conforme o escopo do sistema fiscal.

    Existem dois tipos de intenção possíveis:

    1. "consulta_estrutura_dados":
        - A pergunta pode ser respondida com base nos dados estruturados disponíveis sobre notas fiscais.
        - Exemplos:
          - "Quais notas fiscais foram emitidas em janeiro de 2023?"
          - "Qual o valor total das notas fiscais emitidas no mês passado?"
          - "Me mostre as notas com produtos do tipo fertilizante"
          - "Quais notas fiscais foram emitidas com o produto X?"
          - "Quais notas fiscais foram emitidas com o CNPJ 123456780001

    2. "fora_de_escopo":
        - A pergunta não está relacionada aos dados estruturados consultáveis diretamente no banco.
        - Exemplos:
          - "Como posso pagar menos imposto?"
          - "Cadastre uma nova nota para mim"
          - "Minha empresa pode ser autuada por isso?"
          - "Quais são as regras para emissão de notas fiscais?"
          - "Como funciona a legislação tributária?"

      Dica: Uma consulta válida geralmente envolve dados factuais e estruturados — como valores, datas, códigos, CNPJs — que podem ser buscados diretamente em tabelas relacionais.

    Regras:
    - Retorne apenas um JSON com a classificação da intenção.
    - Se for "fora_de_escopo", inclua uma orientação curta e simpática sugerindo como reformular.
    - Não gere payloads ou explicações técnicas.
    - Nunca invente informações.

    Formatos esperados:

    Caso a intenção seja válida:
    {{
      "intencao": "consulta_estrutura_dados"
    }}

    Caso a intenção esteja fora do escopo:
    {{
      "intencao": "fora_de_escopo",
      "orientacao": "Sua pergunta não parece estar relacionada aos dados estruturados das notas fiscais. Tente reformular pedindo, por exemplo, notas por CNPJ, data ou valor."
    }}

    Pergunta do usuário:
    {input_do_usuario}

generate_payload:
  description: "Transforma uma pergunta do usuário em um payload de consulta estruturada para o banco."
  prompt: |
    Sua tarefa é transformar perguntas em linguagem natural sobre dados fiscais em um payload JSON estruturado, usando as tabelas e campos fornecidos no contexto.

    Formato de saída obrigatório (nunca explique, apenas gere o JSON puro):

    Caso **não haja agregação**:

    {{
      "filters": {{
          "NFHeader": {{
              "campo1": "valor1"
          }},
          "NFItens": {{
              "campo2": "valor2"
          }}
      }},
      "fields": [
          "NFHeader.campoX",
          "NFItens.campoY"
      ]
    }}

    Caso **haja agregação**:
    {{
      "filters": {{
          "NFHeader": {{}},
          "NFItens": {{}}
      }},
      "fields": [],
      "aggregation": {{
          "operation": "sum",
          "target_field": "NFItens.valor_total",
          "group_by": "NFHeader.cnpj_emitente"
      }}
    }}

    Regras:
    - Use sempre os campos válidos conforme o catálogo fornecido.
    - Separe corretamente os filtros por tabela.
    - Nunca gere campos inexistentes ou inventados por suposição.
    - Se o usuário pedir "total", "soma", "média", "quantidade", "número de...", "agrupado por...", "por CNPJ", "por estado", etc., considere como intenção de agregação.
    - Se o usuário indicar apenas o mês (ex: "janeiro de 2024"), gere o filtro de data com:
      "data_emissao": {{
        "between": ["2024-01-01", "2024-01-31"]
      }}
    - O campo "group_by" só deve ser incluído se o usuário pedir divisão por categoria, CNPJ, produto, estado etc.
    - Sempre retorne apenas o JSON puro, sem nenhum comentário, explicação ou texto adicional.

      Exemplos de perguntas e payloads esperados:

    1. Pergunta:
    "Qual o valor total das notas fiscais emitidas em janeiro de 2024 por UF do emitente?"

    Resposta esperada:
    {{
      "filters": {{
        "NFHeader": {{
          "data_emissao": {{
            "between": ["2024-01-01", "2024-01-31"]
          }}
        }},
        "NFItens": {{}}
      }},
      "fields": [],
      "aggregation": {{
        "operation": "sum",
        "target_field": "NFHeader.valor_nota_fiscal",
        "group_by": "NFHeader.uf_emitente"
      }}
    }}

    2. Pergunta:
    "Quantas notas foram emitidas com o produto 'fertilizante'?"

    Resposta esperada:
    {{
      "filters": {{
        "NFHeader": {{}},
        "NFItens": {{
          "descricao": "fertilizante"
        }}
      }},
      "fields": [],
      "aggregation": {{
        "operation": "count",
        "target_field": "NFHeader.numero"
      }}
    }}

    Catálogo de dados fornecido:
    {catalogo_de_dados_injetado_pelo_rag}

    Pergunta do usuário:
    {input_do_usuario}


validate_payload:
  description: "Verifica se um payload JSON é válido de acordo com o catálogo de dados fornecido."
  prompt: |
    Sua tarefa é analisar o payload JSON a seguir e responder apenas com seu status de validade.

    Verifique:
    - Todas as tabelas existem no catálogo.
    - Todos os campos são válidos para suas respectivas tabelas.
    - Não há campos com erro de digitação ou inexistentes.

    Regras obrigatórias:
    - Responda apenas com: {{"status": "valid"}} ou {{"status": "invalid"}}
    - Não adicione nenhum texto, comentário, explicação ou formatação adicional.
    - A resposta deve ser estritamente um JSON contendo apenas o campo "status".

    Catálogo de dados:
    {catalogo_de_dados_injetado_pelo_rag}

    Payload recebido:
    {payload_gerado}

# rewrite_response:
#   description: "Formata a resposta do banco de forma resumida e amigável para o usuário."
#   prompt: |
#     Você receberá:
#     - A pergunta original do usuário.
#     - O resultado bruto da consulta SQL (normalmente uma lista de linhas e colunas).

#     Sua tarefa é:

#     - Gerar uma resposta textual resumida e fácil de entender.
#     - Basear a resposta tanto no resultado SQL quanto na intenção da pergunta.
#     - Caso o resultado contenha muitos registros, forneça um resumo geral.
#     - Nunca invente dados, sempre respeite o conteúdo recebido.
#     - Mantenha o foco objetivo: os dados fiscais solicitados.
#     - Evite jargões técnicos, use uma linguagem simples e direta.
#     - Se a consulta não retornar resultados, informe que não há dados correspondentes.
#     - Se a consulta retornar muitos registros, resuma os dados mais relevantes.

#     Pergunta do usuário:
#     {input_do_usuario}

#     Resultado da consulta:
#     {resultado_sql}

